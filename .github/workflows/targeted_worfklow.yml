name: Build and Save Docker Image

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      base_branch:
        description: "Branch to base the Docker image on (e.g., main, dev)"
        required: true
        default: "main"
      action:
        description: "Action to perform: build, build-no-cache"
        required: true
        default: "build" 

env:
  CACHE_IMAGE: ghcr.io/firms-gta/geoflow-tunaatlas-cache
  DOCKER_BUILDKIT: 1
  RENV_PATHS_ROOT: /root/.cache/R/renv

jobs:
  docker:
    runs-on: ubuntu-latest
    timeout-minutes: 140

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Calculate `renv.lock` Hash
        id: renv_lock
        run: |
          if [ -f renv.lock ]; then
            echo "renv_lock_hash=$(sha256sum renv.lock | cut -d' ' -f1)" >> $GITHUB_ENV
          else
            echo "renv_lock_hash=default" >> $GITHUB_ENV
          fi

      - name: 🔍 Calculate `DOI.csv` Hash
        id: doi_csv
        run: |
          if [ -f data/DOI.csv ]; then
            echo "doi_csv_hash=$(sha256sum data/DOI.csv | cut -d' ' -f1)" >> $GITHUB_ENV
          else
            echo "doi_csv_hash=default" >> $GITHUB_ENV
          fi
          
      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: image=moby/buildkit:master,network=host
          
      - name: Login to image repository
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 🐳 Build Docker Image
        if: ${{ !contains(github.event.head_commit.message, 'No building docker image') }}
        run: |
          BRANCH_NAME=$(echo ${{ github.ref_name }} | tr '/' '_' | tr ':' '_')
    
          if [[ "${{ github.event.inputs.action }}" == "build-no-cache" ]]; then
            echo "🚀 Building without cache..."
            docker buildx build \
              --no-cache \
              --progress=plain \
              --build-arg RENV_PATHS_ROOT=${{ env.RENV_PATHS_ROOT }} \
              --build-arg RENV_LOCK_HASH=${{ env.renv_lock_hash }} \
              --build-arg DOI_CSV_HASH=${{ env.doi_csv_hash }} \
              --tag my-targets-pipeline \
              --output type=docker,dest=/tmp/docker-image.tar \
              .
          else
            echo "🚀 Building with cache..."
            docker buildx build \
              --progress=plain \
              --cache-from type=registry,ref=$CACHE_IMAGE:${BRANCH_NAME} \
              --cache-to type=registry,ref=$CACHE_IMAGE:${BRANCH_NAME},mode=max \
              --build-arg RENV_PATHS_ROOT=${{ env.RENV_PATHS_ROOT }} \
              --build-arg RENV_LOCK_HASH=${{ env.renv_lock_hash }} \
              --build-arg DOI_CSV_HASH=${{ env.doi_csv_hash }} \
              --tag my-targets-pipeline \
              --output type=docker,dest=/tmp/docker-image.tar \
              .
          fi
      
      - name: 📦 Sauvegarder l’image Docker
        run: docker save -o my-targets-pipeline.tar my-targets-pipeline

      - name: 📤 Uploader l’image Docker comme un artefact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: my-targets-pipeline.tar
